spring - 기본

1. SPRING 특징

 1) MVC1 - 컨트롤러 역할을 JSP (스파게트 코드)
 2) MVC2 - 컨트롤러 역할을 SERVLET
 3) Frontcontroller pattern

 프로그램을 재사용하는 방안은?
 - copy & paste (복붙)
 - 메서드
 - 클래스의 재사용  >> interface
	<<interface>>
    Animal - eat() / sleep() / poo()
     |     |
  Cat   Person

  프레임워크? -> [ 디자인 패턴 + 라이브러리 = 프레임워크 ]
  1. 디자인 패턴
    - 가이드 라인 : 
	문제해결을 위해 노하우를 축적하여 재사용하기 좋은 형태로 특정 규약을 묶어서 정리한 것

    for( 순서, 시작, 종료 ) / while( 게시판 )
    frotcontroller

  2. 라이브러리
   - 특정부분의 기술구현을 라이브러리 형태로 제공
   - 반제품 ( $.ajax() , $("#id").click() 등등...

  3. 프레임워크
   - 소프트웨어 개발의 뼈대 역할
   - 어플리케이션들에 공통적으로 필요한 기능들을 편리하게 사용할 수 있도록 제공하고 개발을 편하게 만들어줌

  ※ 라이브러리는 개발자가 실행 흐름을 담당
  ※ 프레임워크는 [프레임워크]에서 실행 흐름을 담당

  4. 프레임워크 특징
   ★ IOC (INVERSION OF CONTROL)
    -  제어의 역전
    - 인스턴스의 생성 ~ 소멸까지 생명주기를 개발자가 아닌 컨테이너가 하는 것
    - POJO (Plain old java object)
      필요에 따라 재활용 될 수 있는 방식으로 설계된 객체

   Class A{}
   A a1 = new A();
   생성 -> 초기화 -> 서비스 -> 소멸 (=pojo 여태까지 우리가 배운 코딩 방식)

   ※ IOC 가 아닌 경우
	[개발자 생성  → ( Class A )
		생성  → ( Class B )
		   생성  → ( Class C ) ] 컨터이너

   ※ IOC 인 경우
	[개발자 생성  ← ( Class A )
		생성  ← ( Class B )
		   생성  ← ( Class C ) ] 컨터이너

   5. 프레임워크 구성 기능요소
    [ AOP ][ORM - DAO  - Mybatis] [Web - Context] [Spring Web Mvc]
    [ Spring Core ]



2. IOC+ DI
 ㄴ DL ( Dependency LookUp : 의존성 검색 )
     : Bean 에 접근하기 위해서 컨테이너가 제공하는 api를 이용하여 lookup 하는 것
 ㄴ DI  ( Dependency Injection : 의존성 주입 )
     : 각 클래스간의 의존관계를 설정파일을 통해 컨테이너가 자동으로 연결해주는 것

	장점 : 코드 단순화 / 결합도 제거

실습 0) DYNAMIC WEB PROJECT - DI [◎ 프로젝트명 : spring0 - di]
  1. dynamic web project - spring0
  2. configure - [ Convert to Maven Project ]
  
실습 1) spring -  [◎ 프로젝트명 : spring001 - di]
  1. 스프링 3버전 다운로드
  2. 다운로드 경로 https://github.com/spring-attic/toolsuite-distribution/wiki/Spring-Tool-Suite-3
     1) dynamic web project - spring001
     2) configure 

실습 2) spring002 
	java se-11




3. JUNIT - 테스트 (작성중인 메서드가 제대로 동작하는지 부분적으로 run 가능)
각 경로로 가서 다운로드

@Test 테스트를 수행
@Ignore 수행 X

@Before @Test 실행 되기전에 반드시 실행
@After   @Test 실행 된 후에 반드시 실행
@BeforeClass  @Test 실행 되기전에 한번만 사용시
@AfterClass    @Test 실행 된 후에 한번만 사용시

    @BeforeClass

@Before  @Test  @After
@Before  @Test  @After

    @AfterClass


STEP2) 사용 메서드
- 테스트결과를 확인하는 단정 ( assert ) 메서드
assertEquals(a,b) 객체 A 와 B 가 일치함
	a 기대되는 결과값
	b 값 넣어주기 - 메서드 호출하는 값

assertSame(a,b)

<!-- https://mvnrepository.com/artifact/junit/junit -->
<dependency>
    <groupId>junit</groupId>
    <artifactId>junit</artifactId>
    <version>4.12</version>
    <scope>test</scope>
</dependency>
<!-- https://mvnrepository.com/artifact/org.springframework/spring-context -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-context</artifactId>
    <version>4.3.27.RELEASE</version>
</dependency>
<!-- https://mvnrepository.com/artifact/org.springframework/spring-test -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-test</artifactId>
    <version>4.3.27.RELEASE</version>
    <scope>test</scope>
</dependency>







4. bean
 Bean이란 ? Spring Di 컨테이너가 관리하는 객체(일꾼)
 BeanFactory
   - Bean을 관리하는 컨테이너 (회사)
   - 객체 생성과 객체 사이의 런타임 관계
   - Bean 등록, 생성, 조회, 반환 관리
   - BeanFactory 확장개념인 ApplicationContext를 사용
 ApplicationContext
   - 기능 추가
   * Bean 등록, 생성, 조회, 반환 관리
   * Spring 각종 부가 서비스 추가

   <<INTERFACE>>
       Beanfactory
             ↑
   <<INTERFACE>>
    ApplicationContext



5. 프로젝트 구성
6. aop
7. MYBATIS
8. MVC
9. RESTFUL
#. 

@RunWith(SpringJUnit4ClassRunner.class)






